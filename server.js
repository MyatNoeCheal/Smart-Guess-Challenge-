import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { OpenAI } from 'openai';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(cors());
app.use(express.json());

// Serve frontend static files from public folder
app.use(express.static(path.join(__dirname, 'public')));

if (!process.env.OPENAI_API_KEY) {
  console.error("ERROR: OPENAI_API_KEY environment variable is not set!");
  process.exit(1);
}

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

app.post("/get-fake-fact", async (req, res) => {
  console.log("Received /get-fake-fact request");

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "user",
          content:
            "Generate a short realistic-sounding fact that could be either true or fake. Keep it short and explain why it sounds believable."
        }
      ],
    });

    console.log("OpenAI response received");
    // Check if response is valid
    if (
      response &&
      response.choices &&
      response.choices.length > 0 &&
      response.choices[0].message &&
      response.choices[0].message.content
    ) {
      const fact = response.choices[0].message.content;
      res.json({ fact, explanation: "Generated by AI for educational purposes." });
    } else {
      console.error("OpenAI response missing expected content:", response);
      res.status(500).json({ error: "Invalid response from OpenAI." });
    }
  } catch (err) {
    console.error("OpenAI error:", err);
    res.status(500).json({ error: "Failed to generate fact." });
  }
});

// Fallback route for SPA or frontend routing
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(port, () => {
  console.log(`âœ… Server running at http://localhost:${port}`);
});
